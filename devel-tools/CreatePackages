#!/usr/bin/perl
# CreatePackages
# Script to create day planner packages
# $Id$
# Copyright (C) Eskild Hustvedt 2006
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

use strict;
use warnings;
use File::Temp;
use Cwd qw/realpath getcwd/;
use File::Basename qw/dirname/;
use File::Find;
use File::Path qw/mkpath rmtree/;

my $DPVersion = "0.3.1";
my $BuildRPM = 1;
my $BuildInstaller = 1;
my $SaveRPMLog = 0;

sub InPath ($) {
	foreach (split /:/, $ENV{PATH}) { if (-x "$_/@_" and ! -d "$_/@_" ) {	return 1; } } return 0;
}

$| = 1;
print "Preparing...\n";
my $tempdir = File::Temp::tempdir( 
	CLEANUP => 1
);
print " Detecting the source directory...";
my $OrigDir = dirname(realpath($0));
unless(-e "$OrigDir/devel-tools/installer") {
	$OrigDir = "$OrigDir/../";
	unless (-e "$OrigDir/devel-tools/installer") {
		$OrigDir = "$OrigDir/../../";
		unless (-e "$OrigDir/devel-tools/installer") {
			die "failed - I'm giving up. Run me from the tools directory in the day planner source tree please.\n";
		}
	}
}
$OrigDir = realpath($OrigDir);
print "found $OrigDir\n";

if(defined($ENV{DP_NORPM}) and $ENV{DP_NORPM}  eq '1') {
	print " Skipping RPM building.\n";
	$BuildRPM = 0;
}
if(defined($ENV{DP_NOINSTALLER}) and $ENV{DP_NOINSTALLER}  eq '1') {
	print " Skipping installer building.\n";
	$BuildInstaller = 0;
}
if(defined($ENV{DP_SAVERPMLOG}) and $ENV{DP_SAVERPMLOG}  eq '1') {
	$SaveRPMLog = 1;
}

print " Verifying required components...";

my @RequiredComponents;

if ($BuildRPM) {
	@RequiredComponents = qw/tar bzip2 bunzip2 rpm rpmbuild/;
} else {
	@RequiredComponents = qw/tar bzip2 bunzip2/;
}

foreach (@RequiredComponents) {
	unless (InPath($_)) {
		die("failed - \"$_\" is missing\n");
	}
	print ".";
}

print "okay\n";
print " Created temporary directory $tempdir\n";
unless(-e "$OrigDir/packages") {
	mkpath("$OrigDir/packages");
	print " Created directory $OrigDir/packages\n";
} else {
	print " Cleaning $OrigDir/packages/...";
	foreach(<$OrigDir/packages/*>) {
		print ".";
		unlink($_);
	}
	print "done\n";
}

chdir($tempdir) or die "Unable to chdir to $tempdir: $!\n";
mkpath("$tempdir/dayplanner-$DPVersion/");

print "Building tarball...\n";
# Copy the files
print " Copying files...";
if (system("cp -r $OrigDir/* $tempdir/dayplanner-$DPVersion/ && cp -r $OrigDir/.svn $tempdir/dayplanner-$DPVersion/")) {
	die "failed\n";
}
print "done\n";

# Remove SVN files
print "Removing files not present in SVN...";
my @RMDirs;
find(sub {
	# Skip SVN files
	return if $File::Find::name =~ m#/\.svn#;
	if(-d $File::Find::name) {
		return if $File::Find::name eq $tempdir;
		return if $File::Find::name eq "$tempdir/dayplanner-$DPVersion";
		unless(-d "$File::Find::name/.svn") {
			push(@RMDirs, $File::Find::name);
		}
	} else {

		unless(-e "./.svn/text-base/$_.svn-base") {
			print ".";
			unlink($_);
		}
	}
}, $tempdir);
foreach(@RMDirs) {
	rmtree($_);
	print ".";
}
print "done\n";

# Clean up the archive
print " Cleaning up the source directory...";
system("rm -rf `find $tempdir/dayplanner-$DPVersion/ -name '*.svn*'`");
print ".";
system("rm -rf $tempdir/dayplanner-$DPVersion/packages/");
print ".";
system("rm -rf `find $tempdir/dayplanner-$DPVersion/ -name '*~'`");
print ".";
system("rm -rf `find $tempdir/dayplanner-$DPVersion/ -name '*.tmp'`");
print ".";
system("rm -rf `find $tempdir/dayplanner-$DPVersion/ -name '*.swp'`");
print "done\n";

print " Packaging...";
if (system("tar -jcf ./dayplanner-$DPVersion.tar.bz2 ./dayplanner-$DPVersion &> /dev/null")) {
	die "failed\n";
}
system("mv ./dayplanner-$DPVersion.tar.bz2 $OrigDir/packages/");
print "done\n";

if($BuildRPM) {
	print "Building rpm...\n";
	print " Checking for required files...";
	unless (-e "$OrigDir/devel-tools/rpm/changelog.spec") {
		die "failed - $OrigDir/devel-tools/rpm/changelog.spec does not exist\n";
	}
	unless (-e "$OrigDir/devel-tools/rpm/package.spec") {
		die "failed - $OrigDir/devel-tools/rpm/package.spec does not exist\n";
	}
	unless (-d "$ENV{HOME}/rpm/SOURCES/") {
		die "failed - $ENV{HOME}/rpm/SOURCES/ does not exist\n";
	}
	unless (-d "$ENV{HOME}/rpm/RPMS/noarch/" and -d "$ENV{HOME}/rpm/SRPMS/") {
		die("failed - I need/rpm/RPMS/noarch\n");
	}
	print "okay\n";
	print " Copying tarball...";
	system("cp $OrigDir/packages/dayplanner-$DPVersion.tar.bz2 $ENV{HOME}/rpm/SOURCES/");
	print "done\n";
	print " Preparing specfile...";
	my @RPM_SPECFILE;

	# Read package.spec
	open(SPECFILE, "<$OrigDir/devel-tools/rpm/package.spec") or die "failed - unable to open $OrigDir/devel-tools/rpm/package.spec for reading: $!\n";

	foreach(<SPECFILE>) {
		s/\[DAYPLANNER_VERSION\]/$DPVersion/;
		push(@RPM_SPECFILE, $_);
	}
	close(SPECFILE);
	print ".";

	# Read the changelog (changelog.spec)
	open(SPECFILE, "<$OrigDir/devel-tools/rpm/changelog.spec") or die "failed - unable to open $OrigDir/devel-tools/rpm/changelog.spec for reading: $!\n";

	foreach(<SPECFILE>) {
		push(@RPM_SPECFILE, $_);
	}
	close(SPECFILE);
	print ".";

	# Write it
	open(SPECFILE, ">$tempdir/dayplanner.spec") or die "failed - unable to open $tempdir/dayplanner.spec for writing: $!\n";
	print SPECFILE @RPM_SPECFILE;
	print "done\n";
	close(SPECFILE);

	print " NOTE: Remember to add a changelog entry in $OrigDir/devel-tools/rpm/changelog.spec\n";

	# Build the RPM package
	print " Building RPM...";
	if(system("rpmbuild --define '_with_unstable 1' --with old_menu --with holidayparser -ba $tempdir/dayplanner.spec &> $tempdir/rpmbuild.log")) {
		system("mv $tempdir/rpmbuild.log $OrigDir/packages/rpmbuild.log");
		die("failed - rpm build log saved to $OrigDir/packages/rpmbuild.log\n");
	}
	print "done\n";
	if($SaveRPMLog) {
		system("mv $tempdir/rpmbuild.log $OrigDir/packages/rpmbuild.log");
		print " Logfile saved to $OrigDir/packages/rpmbuild.log\n";
	}
	print " Moving files...";
	system("mv $ENV{HOME}/rpm/RPMS/noarch/dayplanner*.rpm $ENV{HOME}/rpm/SRPMS/dayplanner*.rpm $OrigDir/packages/ &>/dev/null");
	print "done\n";
	print " Cleaning up...";
	unlink("$ENV{HOME}/SOURCES/dayplanner-$DPVersion.tar.bz2");
	print "done\n";
}

if($BuildInstaller) {

	print "Building self-contained installer package...\n";
	print " Preparing...";
	chdir($tempdir);
	print ".";
	mkdir("$tempdir/installer");
	print ".";
	system("mv ./dayplanner-$DPVersion $tempdir/installer/dayplanner-data");
	print ".";
	# Copy the needed files
	foreach(qw/MainInstallerPart StartInstaller xmsg/) {
		system("cp -r $OrigDir/devel-tools/installer/$_ $tempdir/installer/");
		print ".";
	}
	print "done\n";
	print " Running tools/BuildLocale...";
	system("$tempdir/installer/dayplanner-data/devel-tools/BuildLocale > /dev/null");
	print "done\n";
	# Find makeself
	print " Detecting makeself...";
	my $Makeself_Dir;
	my @Makeself_Dirs = (
		"$ENV{HOME}/makeself",
		"$ENV{HOME}/downloads/makeself"
	);
	foreach(@Makeself_Dirs) {
		if (-e "$_/makeself.sh") {
			$Makeself_Dir = $_;
			last;
		}
	}
	unless(defined($Makeself_Dir) and length($Makeself_Dir)) {
		die("failed - unable to detect makeself. Install makeself to $ENV{HOME}/downloads/makeself please\n");
	}
	chdir($Makeself_Dir);
	print "done\n";
	print " Running makeself...";
	if(system("./makeself.sh --nox11 $tempdir/installer/ dayplanner-$DPVersion.run 'Generic day planner installation script' ./StartInstaller &>/dev/null")) {
		die("failed - makeself command exited with a nonzero return value\n");
	}
	print "done\n";
	print " Moving package...";
	system("mv ./dayplanner-$DPVersion.run $OrigDir/packages/");
	print "done\n";
}
