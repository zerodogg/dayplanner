#!/bin/bash
# xmsg from GFSBashLib (http://goldenfiles.sf.net)
# Copyright (C) Eskild Hustvedt 2005
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# NOTE: This is a heavily stripped version of xmsg. Get the one from the
# gfsbashlib CVS instead if you plan to use it.

# (xmsg-src/funcs)
# The function called when displaying a internal xmsg error
xmsg_int_error ()
{
	echo 1>&2 "*** xmsg ($GFBL_XMSG_VERSION): error: $*"
	if [ "$GFBL_XMSG_EXIT_ON_ERROR" == "1" ]; then exit 1;fi
}
# The function called when displaying a internal xmsg warning
xmsg_int_warning ()
{
	echo 1>&2 "*** xmsg ($GFBL_XMSG_VERSION): warning: $*"
	if [ "$GFBL_XMSG_EXIT_ON_WARNING" == "1" ]; then exit 1;fi
}
# (xmsg-src/init)
# Initialize xmsg, doesn't take any parameters.
#
# Return values:
# 0  = success
# 30 = Unable to detect any supported program (xmsg unusable)
# 31 = No DISPLAY variable set
xmsg_init ()
{
	# This is a simple function that sets which abilities xmsg has
	xmsg_setfunc ()
	{
		# This one can't be selected, if this is run we set it to 1
		export GFBL_XMSG_AVAIL=1

		export GFBL_XMSG_FSEL="$1"	# File and directory selection
		export GFBL_XMSG_LESS="$2"	# Display a file on screen
		export GFBL_XMSG_MENU="$3"	# Graphical menu
		export GFBL_XMSG_OK="$4"	# Ok dialog
		export GFBL_XMSG_QUESTION="$5"	# Question dialog
		export GFBL_XMSG_GETINPUT="$6"	# Input dialog
	}
	# First we unset variables that shouldn't be set
	unset GFBL_XMSG_PROG GFBL_XMSG_AVAIL
	# Set version variables
	export GFBL_XMSG_VERSION="0.1"

	# Initial test if we are under X
	if [ "$DISPLAY" == "" ]; then
		xmsg_int_error "X is not running, xmsg can not be used in console-only mode"
		return 31
	fi

	# Now detect which program to use
	# Only allow kdialog as primary when we are _in_ KDE.
	# Using it as default in a non-KDE environment is way too slow
	# but still a useful fallback.
	if [[ -n "$KDE_FULL_SESSION" ]]; then
		local XPROGS="$XMSG_PREFERRED_PROG kdialog zenity Xdialog  gxmessage gmessage xmessage"
	else
		local XPROGS="$XMSG_PREFERRED_PROG zenity Xdialog kdialog gxmessage gmessage xmessage"
	fi
	for a in $XPROGS; do
		if type $a &>/dev/null; then
			export GFBL_XMSG_PROG="$a"
			break
		elif [ -x $a ]; then
			export GFBL_XMSG_PROG="$a"
			break
		fi
	done
	if [ "$GFBL_XMSG_PROG" == "" ]; then
		xmsg_int_error "Unable to detect any supported program."
		export GFBL_XMSG_AVAIL=0
		return 30
	fi
	export GFBL_XMSG_BASEPROG="`basename $GFBL_XMSG_PROG`"
	# Now we need to know which functionalities we have
	case $GFBL_XMSG_BASEPROG in
		zenity ) xmsg_setfunc 1 1 1 1 1 1;;
		Xdialog ) xmsg_setfunc 1 1 1 1 1 1;;
		kdialog ) xmsg_setfunc 1 1 1 1 1 1;;
		gxmessage ) xmsg_setfunc 0 0 0 1 1 1;;
		gmessage | xmessage ) xmsg_setfunc 0 0 0 1 1;;
		* ) # Uh oh, we didn't recognise the XMSG_PREFERRED_PROG selected, ignore it and
		# restart $FUNCNAME with it unset
		xmsg_int_warning "Could not recognise the program set in XMSG_PREFERRED_PROG ($XMSG_PREFERRED_PROG), ignoring."
		unset XMSG_PREFERRED_PROG
		unset XGFBL_XMSG_BASEPROG
		$FUNCNAME
		return $?;;
	esac
	return 0
}
# (xmsg-src/ok)
# Display a "ok" box with the text supplied to xmsg_ok, ex:
# xmsg_ok "Bla bla bla bla"
#
# Returns 0 on success
# Returns 2 when no DISPLAY variable is st
# Returns 3 on no suitable program detected
xmsg_ok ()
{
	if [ "$GFBL_XMSG_AVAIL" != "1" ] || [ "$GFBL_XMSG_OK" != "1" ]; then  xmsg_int_warning "$FUNCNAME called but not available" ;return 40 ;fi
	MESSAGE="$*"
	if [ "$MESSAGE" == "" ]; then MESSAGE="Error: No message supplied to $FUNCNAME (GFSBashLib).
This is a bug in the program you are using,
please report it to the author.";xmsg_int_warning "$FUNCNAME did not get any message supplied";fi
	case $GFBL_XMSG_BASEPROG in
		gxmessage|xmessage|gmessage ) $GFBL_XMSG_PROG "$MESSAGE";;
		Xdialog ) $GFBL_XMSG_PROG --wrap --msgbox "$MESSAGE" 0 0;;
		kdialog ) $GFBL_XMSG_PROG --msgbox "$MESSAGE" 0 0 2>/dev/null;;
		zenity ) $GFBL_XMSG_PROG --info --text "$MESSAGE";;
	esac
}
