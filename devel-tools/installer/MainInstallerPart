#!/usr/bin/perl
# MainInstallerPart
# Copyright (C) Eskild Hustvedt 2006
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This is a quick "hack" of an installer for Day Planner

use strict;
use warnings;
use Gtk2;
use File::Copy;
use File::Path;
use POSIX ":sys_wait_h";

my $ProgressWin;
my $InstallDirectory = "$ENV{HOME}/.local/share/dayplanner";
my $AutoInstaller;
my $TotalSteps = 10;
my $Performed = 0;

# Purpose: Create a progresswindow
# Usage: my $ProgressWin = DPCreateProgressWin(WINDOW NAME, INITIAL PROGRESS BAR TEXT, PULSATE_MODE?);
# 	Returns a hashref with the following keys:
# 		Window = The window
# 		ProgressBar = The progress bar
sub DPCreateProgressWin {
	my ($Name, $Text, $PulsateMode) = @_;
	my %ProgressHash;
	$ProgressHash{Window} = Gtk2::Window->new();
	$ProgressHash{Window}->set_skip_taskbar_hint(1);
	$ProgressHash{Window}->set_skip_pager_hint(1);
	if(defined($Name)) {
		$ProgressHash{Window}->set_title($Name);
	}
	$ProgressHash{ProgressBar} = Gtk2::ProgressBar->new();
	$ProgressHash{Window}->add($ProgressHash{ProgressBar});
	$ProgressHash{Window}->set_modal(1);
	$ProgressHash{Window}->set_resizable(0);
	if(defined($Text)) {
		$ProgressHash{ProgressBar}->set_text($Text);
	} else {
		$ProgressHash{ProgressBar}->set_fraction(0);
	}
	if($PulsateMode) {
		$ProgressHash{ProgressBar}->{activity_mode} = 0;
	}
	$ProgressHash{ProgressBar}->show();
	$ProgressHash{Window}->show();
	Gtk2->main_iteration while Gtk2->events_pending;
	Gtk2->main_iteration while Gtk2->events_pending;
	Gtk2->main_iteration while Gtk2->events_pending;
	return(\%ProgressHash);
}

# Purpose: Set the progress of a progressbar
# Usage: ProgressMade(FUNCTIONS TO PERFORM, FUNCTIONS PERFORMED, $ProgressWindowHashref, NewText?, No_Dot?);
sub ProgressMade {
	my ($ToPerform, $Performed, $ProgressHash,$Text,$NoDot) = @_;
	print "." unless(defined($NoDot));
	return unless defined($ProgressHash);
	my $Bar = $ProgressHash->{ProgressBar};
	my $Result = sprintf("%d", ($Performed / $ToPerform) * 100);
	if($Result < 100) {
		$Result = "0.$Result"; 
	} else {
		$Result = 1;
	}
	$Bar->set_fraction($Result);
	if($Text) {
		$Bar->set_text($Text);
	}
	Gtk2->main_iteration while Gtk2->events_pending;
	Gtk2->main_iteration while Gtk2->events_pending;
	Gtk2->main_iteration while Gtk2->events_pending;
	Gtk2->main_iteration_do(0);
	Gtk2->main_iteration_do(0);
	Gtk2->main_iteration_do(0);
	return(1, $Result);
}

# Purpose: Run a system() in a child
# Usage: SystemChild(OPTIONS);
#  OPTIONS are identical to system();
sub SystemChild {
	my $PID = fork;
	my $Return;
	if($PID) {
		if(not $AutoInstaller) {
			while(not waitpid($PID, WNOHANG)) {
				Gtk2->main_iteration while Gtk2->events_pending;
				Gtk2->main_iteration_do(0);
			}
		} else {
			waitpid($PID,0);
		}
		$Return = $?;
	} else {
		exec(@_);
	}
	return($Return);
}

# Purpose: Display an error dialog or warn() it
# Usage: DPError("Error message");
sub DPError {
	if(not defined($ARGV[1]) and $ARGV[1] eq 'auto') {
		my $Dialog = Gtk2::MessageDialog->new(undef, "modal", 'error', 'ok', $_[0]);
		$Dialog->run();
		$Dialog->destroy();
	} else {
		warn($_[0],"\n");
	}
	return(1);
}

$| = 1;

print "Perl installer part...\n";
print "Using install dir: $InstallDirectory\n";
my $Internal_Version = '$Id$';
print "Installer version: $Internal_Version\n";

die("Fatal internal error: Perl installer part got no data directory supplied\n") unless(defined($ARGV[0]));
die("Fatal internal error: The data directory supplied ($ARGV[0]) does not exist.\nThis probably means that this package is corrupt, try re-downloading it.\n") unless -e $ARGV[0];

my $InstallerData = $ARGV[0];
print "Installer data is in $InstallerData\n";

sub InPath {
	foreach (split /:/, $ENV{PATH}) {
		if (-x "$_/@_") {
			return 1;
		}
	}
	return 0;
}


if(defined($ARGV[1]) and $ARGV[1] eq 'auto') {
	print "Using automatic install - skipping prompts\n";
	$AutoInstaller = 1;
} else {
	Gtk2->init();
	my $Dialog = Gtk2::MessageDialog->new(undef, "modal", 'question', 'yes-no', "Welcome to the Day Planner installation program. This will install Day Planner into a subdirectory of your home directory and put a Day Planner icon on your desktop. All of this will be done automatically.\n\nDo you want to continue?");
	$Dialog->set_skip_pager_hint(0);
	$Dialog->set_skip_taskbar_hint(0);
	$Dialog->set_title("Day Planner Installer");
	my $Reply = $Dialog->run();
	$Dialog->destroy();
	unless($Reply eq 'yes') {
		print "Exiting as requested by user\n";
		exit(0);
	}
	# Flush the display
	Gtk2->main_iteration while Gtk2->events_pending;

	$ProgressWin = DPCreateProgressWin("Installing", "Installing Day Planner...", 0);
	$ProgressWin->{Window}->set_skip_pager_hint(0);
	$ProgressWin->{Window}->set_skip_taskbar_hint(0);
}
print "Verifying dependencies...";
foreach(qw(POSIX Getopt::Long Cwd File::Basename IO::Socket IO::Select)) {
	print ".";
	if(not eval("use $_; 1")) {
		DPError("You appear to be missing the perl module \"$_\". This module is required for Day Planner to work. Please install the module and then restart this installer");
		exit(0);
	}
}
print "okay\n";

$Performed++;
ProgressMade($TotalSteps, $Performed, $ProgressWin,undef,1);

if(-d $InstallDirectory) {
	print "Found old install, running uninstaller first...\n";
	if(-e "$InstallDirectory/uninstall.sh") {
		SystemChild("sh","$InstallDirectory/uninstall.sh","quick") and print "Uninstaller failed, expect trouble.\n";
	} else {
		print "Failed to run uninstaller, expect trouble.\n";
	}
}

$Performed++;
ProgressMade($TotalSteps, $Performed, $ProgressWin,undef,1);

print "Installing...";
SystemChild("mkdir -p $InstallDirectory");

if(defined($ENV{DAYPLANNER_CP_SILENTERRORS}) and $ENV{DAYPLANNER_CP_SILENTERRORS} eq 'TRUE') {
	# When using the local installer we might get svn files which will make cp display
	# harmless errors. Setting DAYPLANNER_CP_SILENTERRORS to TRUE silences cp
	SystemChild("cp -r $InstallerData/* $InstallDirectory/ &>/dev/null");
} else {
	SystemChild("cp -r $InstallerData/* $InstallDirectory/");
}

$Performed++;
ProgressMade($TotalSteps, $Performed, $ProgressWin,undef,1);
print ".";

my @BINDIRS = (
	"$ENV{HOME}/bin",
	"$ENV{HOME}/.bin",
	"$ENV{HOME}/.local/bin",
	"/usr/local/bin",
);

$Performed++;
ProgressMade($TotalSteps, $Performed, $ProgressWin,undef,1);
print ".";

my @BINLINKS;

foreach(@BINDIRS) {
	if(-e $_ and -d $_ and -w $_) {
		symlink("$InstallDirectory/dayplanner", "$_/dayplanner");
		symlink("$InstallDirectory/dayplanner-daemon", "$_/dayplanner-daemon");
		symlink("$InstallDirectory/dayplanner-notifier", "$_/dayplanner-notifier");
		push(@BINLINKS, $_)
	}
}
$Performed++;
ProgressMade($TotalSteps, $Performed, $ProgressWin,undef,1);
print ".";
# Write uninstall script
open(UNINSTALL, ">$InstallDirectory/uninstall.sh");
print UNINSTALL "#!/bin/sh\n# Uninstall script for Day Planner\n";
print UNINSTALL "echo -n \"Uninstalling...\"\n";
print UNINSTALL "cd \$HOME\n";
print UNINSTALL "rm -rf '$InstallDirectory'\n";
print UNINSTALL "echo -n \".\"\n";
my $BinLinkRm;
foreach(@BINLINKS) {
	$BinLinkRm .= "'$_/dayplanner' '$_/dayplanner-daemon' '$_/dayplanner-notifier' ";
}
print UNINSTALL "rm -f $BinLinkRm\n" if($BinLinkRm);
print UNINSTALL "echo -n \".\"\n";
print UNINSTALL "if [ -e \$HOME/.menu/dayplanner.menu ]; then\n\trm -f \$HOME/.menu/dayplanner.menu\n\t[ \"\$1\" != \"quick\" ] && update-menus &> /dev/null\nfi\n";
print UNINSTALL "echo -n \".\"\n";
print UNINSTALL '[ "$1" != "quick" ] && [ -e $HOME/Desktop/dayplanner.desktop ] && rm -f $HOME/Desktop/dayplanner.desktop' . "\n";
print UNINSTALL "echo -n \".\"\n";
print UNINSTALL '[ -e "$HOME/.local/share/applications/dayplanner.desktop" ] && rm -f  "$HOME/.local/share/applications/dayplanner.desktop"' . "\n";
print UNINSTALL "echo \"done\"\n";
print UNINSTALL "[ \"\$1\" != \"quick\" ] && echo \"Day Planner has been uninstalled.\"\n";
print UNINSTALL "exit 0\n";
close(UNINSTALL);
SystemChild("chmod +x $InstallDirectory/uninstall.sh");

$Performed++;
ProgressMade($TotalSteps, $Performed, $ProgressWin,undef,1);
print ".";

# Write the XDG-style menu item
if(-e "$InstallDirectory/doc/dayplanner.desktop") {
	SystemChild("perl","-pi","-e","s#DAYPLANNER_INST_DIR#$InstallDirectory#g","$InstallDirectory/doc/dayplanner.desktop");
	$Performed++;
	ProgressMade($TotalSteps, $Performed, $ProgressWin,undef,1);
	print ".";
	mkpath("$ENV{HOME}/.local/share/applications/");
	copy("$InstallDirectory/doc/dayplanner.desktop", "$ENV{HOME}/.local/share/applications/dayplanner.desktop");
	$Performed++;
	ProgressMade($TotalSteps, $Performed, $ProgressWin,undef,1);
	print ".";
	if(-d "$ENV{HOME}/Desktop/") {
		copy("$InstallDirectory/doc/dayplanner.desktop", "$ENV{HOME}/Desktop/");
	}
} else {
	$Performed += 2;
}

$Performed++;
ProgressMade($TotalSteps, $Performed, $ProgressWin,undef,1);
print ".";
# Write Debian-style menu item
if(InPath("update-menus")) {
	mkdir("$ENV{HOME}/.menu/") unless -d "$ENV{HOME}/.menu/";
	open(MENU, ">$ENV{HOME}/.menu/dayplanner.menu");
	print MENU "?package(%{name}):command=\"$InstallDirectory/dayplanner\"  icon=\"$InstallDirectory/art/dayplanner_48.png\"         needs=\"x11\"         section=\"Office/Time Management\"         title=\"Day Planner\"         longtitle=\"An easy to use graphical Day Planner\"\n";
	close(MENU);
	# update-menus doesn't block, so it does more harm than good to use
	# SystemChild().
	system("update-menus &>/dev/null");
}
$Performed++;
ProgressMade($TotalSteps, $Performed, $ProgressWin,undef,1);
print ".";

print "done\n";
unless(defined($ARGV[1]) and $ARGV[1] eq 'auto') {
	$ProgressWin->{Window}->destroy();
	my $Finished = Gtk2::MessageDialog->new(undef, "modal", 'info', 'ok', "You can start Day Planner by clicking on the icon on your desktop.\n\n(If it doesn't work, you can run $InstallDirectory/dayplanner directly)\n\nIf you at some point want to uninstall Day Planner run $InstallDirectory/uninstall.sh");
	$Finished->set_skip_pager_hint(0);
	$Finished->set_skip_taskbar_hint(0);
	$Finished->set_title("Day Planner Installer - Complete");
	$Finished->run();
	$Finished->destroy();
}
print "Installer successfully finished!\n";
exit(0);
