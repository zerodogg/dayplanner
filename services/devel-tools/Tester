#!/usr/bin/perl
# Tester
# Copyright (C) Eskild Hustvedt 2006
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use IO::Socket::INET;
use IO::Select;
use Getopt::Long;
use Digest::MD5 qw(md5_base64);
use Data::Dumper;
use MIME::Base64;

my %CalendarContents = do("$ENV{HOME}/.dayplanner/events.dpd");
my %BirthdayContents = do("$ENV{HOME}/.dayplanner/birthdays.dpd");

my %DPServices = (
	user => 'zerodogg',
	pass => '123',
	host => "localhost",
	port => "1500",
);
my $Version = '$Id$';

my %InternalConfig;

# Purpose: Get Day Planner data encoded in base64
# Usage: my ($Data, $MD5Sum) = DPF_GetData(ONLY_BIRTHDAYS?, ENCRYPT?, NO_EOL?);
sub DPF_GetData {
	my ($OnlyBirthdays, $DPEncrypt, $Base64_NoEOL) = @_;
	$OnlyBirthdays = $OnlyBirthdays ? 1 : 0;
	$Base64_NoEOL = $Base64_NoEOL ? "" : "\n";
	# We want the dumper to be pure (aka. make dumper output a proper syntax that is suitable for eval() or do())
	$Data::Dumper::Purity = 1;
	# Nevermind sorting
	$Data::Dumper::Sortkeys = 0;
	# Set the indentation (none in this case)
	$Data::Dumper::Indent = 0;
	my $Data = "\$DP_OnlyBirthdays = '$OnlyBirthdays';\n\$DP_Exportedby = '$Version';\n \$DP_ExportedAt = '" . time() . "';\n";
	$Data .= Data::Dumper->Dump([\%BirthdayContents], ["*BirthdayCalendarContent"]);

	unless($OnlyBirthdays) {
		$Data .= "\n";
		$Data .= Data::Dumper->Dump([\%CalendarContents], ["*MainCalendarContent"]);
	}
	my $DataMD5 = md5_base64($Data);
	if($DPEncrypt) {
		$Data = EncryptData($Data);
	}
	return(encode_base64($Data,$Base64_NoEOL), $DataMD5);
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Services layer
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Purpose: Connect to a Day Planner services server.
# Usage: my $Return = DPS_Connect(HOST, PORT, USER, PASS);
# 	This shouldn't be called directly. Use DPS_ConnectHandler
sub DPS_Connect {
	my ($Host, $Port, $User, $Password) = @_;
	# Connect
	$DPServices{socket} = IO::Socket::INET->new(
					PeerAddr => $Host,
					PeerPort => $Port,
			) or die "Unable to connect to $Host:$Port: $@\n";
	# Authenticate
	my $APIREPLY = DPS_DataSegment("APILEVEL 0");
	return("APIERROR") if DPS_ErrorIfNeeded("OK", $APIREPLY, sub { print "APIERROR\n"; DPS_Disconnect(); });
	my $AUTHREPLY = DPS_DataSegment("AUTH $User $Password");
	return("AUTHERROR") if DPS_ErrorIfNeeded("OK", $AUTHREPLY, sub { print "AUTHERROR\n"; DPS_Disconnect(); });
	return("OK");
}

# Purpose: Call DPS_Connect and handle errors
# Usage: DPS_ConnectHandler();
sub DPS_ConnectHandler {
	my $CONReply = DPS_Connect($DPServices{host}, $DPServices{port}, $DPServices{user}, $DPServices{pass});
	if($CONReply eq "APIERROR") {
		# Api ERROR message
		print "API Error\n";
		return(undef);
	} elsif($CONReply eq "AUTHERROR") {
		# Auth error message
		print "Authentication error\n";
		return(undef);
	}
	return(1);
}

# Purpose: Do something when an error has occurred
# Usage: my $Return = DPS_ErrorIfNeeded(EXPECTED_REPLY, RECIEVED_REPLY, CODEREF);
# 	The CODEREF will be run if EXPECTED_REPLY does not eq RECIEVED_REPLY
sub DPS_ErrorIfNeeded {
	my ($Expected, $Recieved, $ErrorSub) = @_;
	unless($Expected eq $Recieved) {
		$ErrorSub->($Recieved);
		return(1);
	} else {
		return(0);
	}
}

# Purpose: Disconnect from a Day Planner services daemon
# Usage: DPS_Disconnect();
sub DPS_Disconnect {
	my $Socket = $DPServices{socket};
	close($Socket);
	delete($DPServices{socket});
	return(1);
}

# Purpose: Send data to a Day Planner services daemon and get the reply
# Usage: my $Reply = DPS_DataSegment(DATA_TO_SEND);
sub DPS_DataSegment {
	my $Socket = $DPServices{socket};
	print $Socket "$_[0]\n";
	my $Data = <$Socket>;
	chomp($Data);
	return($Data);
}

# Purpose: Get Day Planner data from a services server
# Usage: DPS_GetData();
sub DPS_GetData {
	return unless DPS_ConnectHandler();
	my $Data = DPS_DataSegment("GETDATA");
	if($Data =~ /^OK/) {
		my $Initial = $Data;
		my $MD5 = $Data;
		my $MainData = $Data;
		$Initial =~ s/^(\S+)\s+.*$/$1/;
		$MD5 =~ s/^(\S+)\s+(\S+)\s+.*/$2/;
		$MainData =~ s/^(\S+)\s+(\S+)\s+(\S+)\s*$/$3/;
		unless(md5_base64($MainData) eq $MD5) {
			print "MD5 mismatch!\n";
		} else {
			$MainData = decode_base64($MainData);
			my ($DP_OnlyBirthdays, $DP_Exportedby, $DP_ExportedAt, %BirthdayCalendarContent, %MainCalendarContent);
			eval($MainData) or do {
				DPIntWarn("FAILED to parse data!");
				return(undef);
			};
			%BirthdayContents = %BirthdayCalendarContent;
			%BirthdayCalendarContent = ();
			unless($DP_OnlyBirthdays) {
				%CalendarContents = %MainCalendarContent;
				%MainCalendarContent = ();
			}
			$InternalConfig{DPS_LastMD5} = $MD5;
		}
	} else {
		if($Data =~ /^ERR NO_DATA/) {
			print "No data found on the server\n";
		} else {
			print "An unknown error occurred: $Data\n";
		}
	}
	DPS_Disconnect();
	return(1);
}

# Purpose: Send data to a services server
# Usage: DPS_SendData();
sub DPS_SendData {
	my $Force = $_[0] ? 1 : 0;
	return unless DPS_ConnectHandler();
	my ($SendData, $RawMD5) = DPF_GetData(0,0,1);
	chomp($SendData);
	my $MD5 = md5_base64($SendData);
	my $LastMD5 = $InternalConfig{DPS_LastMD5} ? $InternalConfig{DPS_LastMD5} : "undef";
	my $Reply = DPS_DataSegment("SENDDATA $MD5 $LastMD5 $SendData $Force");
	DPS_Disconnect();
	unless($Reply eq "OK") {
		# ... Failed
		print "Sending data failed: $Reply\n";
		return(undef);
	}
}

DPS_GetData();
DPS_SendData();
