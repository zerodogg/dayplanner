#!/usr/bin/perl
# UserManager
# Copyright (C) Eskild Hustvedt 2006
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 5.8.0;
use strict;
use warnings;
use Term::ReadLine;
use Term::ReadKey;
use Data::Dumper;
use IO::Socket::INET;
use Digest::MD5 qw(md5_base64);
use File::Path qw/mkpath rmtree/;

my %Users;
my %DPServices;
my $DataDir = "./dpservices/";
$| = 1;		# Don't buffer output

# Purpose: Clear the screen (currently only calls system("clear");)
# Usage: ClearScreen();
sub ClearScreen {
	system("clear");
}

# Purpose: Write a configuration file
# Usage: WriteConfigFile(/FILE, \%ConfigHash, \%ExplanationHash);
sub WriteConfigFile {
	my ($File, $Config, $Explanations) = @_;

	# Open the config for writing
	open(my $CONFIG, ">", "$File") or do {
		# If we can't then we error out, no need for failsafe stuff - it's just the config file
		DPIntWarn("Unable to save the configuration file $File: $!");
		return(0);
	};
	if(defined($Explanations->{HEADER})) {
		print $CONFIG "# $Explanations->{HEADER}\n";
	}
	foreach(sort(keys(%{$Config}))) {
		next unless length($Config->{$_});	# Don't write empty options
		if(defined($Explanations->{$_})) {
			print $CONFIG "\n# $Explanations->{$_}";
		}
		print $CONFIG "\n$_=$Config->{$_}\n";
	}
	close($CONFIG);
}

# Purpose: Load a configuration file
# Usage: LoadConfigFile(/FILE, \%ConfigHash, \%OptionRegexHash, OnlyValidOptions?);
#  OptionRegeXhash can be available for only a select few of the config options
#  or skipped completely (by replacing it by undef).
#  If OnlyValidOptions is true it will cause LoadConfigFile to skip options not in
#  the OptionRegexHash.
sub LoadConfigFile {
	my ($File, $ConfigHash, $OptionRegex, $OnlyValidOptions) = @_;

	open(my $CONFIG, "<", "$File") or do {
		DPError(sprintf("Unable to read the configuration settings from %s: %s", $File, $!));
		return(0);
	};
	while(<$CONFIG>) {
		next if m/^\s*(#.*)?$/;
		next unless m/=/;
		chomp;
		my $Option = $_;
		my $Value = $_;
		$Option =~ s/^\s*(.*)\s*=.*/$1/;
		$Value =~ s/^.*=\s*(.*)\s*/$1/;
		if($OnlyValidOptions) {
			unless(defined($OptionRegex->{$Option})) {
				DPIntWarn("Unknown configuration option \"$Option\" in $File: Ignored.");
				next;
			}
		}
		unless(defined($Value)) {
			DPIntWarn("Empty value for option $Option in $File");
		}
		if(defined($OptionRegex) and defined($OptionRegex->{$Option})) {
			my $MustMatch = $OptionRegex->{$Option};
			unless ($Value =~ /$MustMatch/) {
				print "Invalid setting of $Option in the config file: Must match $OptionRegex->{Option}.\n";
				next;
			}
		}
		$ConfigHash->{$Option} = $Value;
	}
	close($CONFIG);
}

# Purpose: Send a command to the daemon
# Usage: SendDaemonCommand(COMMAND);
sub SendDaemonCommand {
	my $Command = shift;
	my $SocketName = "$DataDir/adminsocket";
	# Verify socket existance
	unless (-e $SocketName) {
		die "$SocketName doesn't exist\n";
	}

	# Verify that it actually IS a socket
	unless (-S $SocketName) {
		die "$SocketName is not a socket\n";
	}

	# Open up the connection to the socket or die trying
	my $socket = IO::Socket::UNIX->new(Peer	=> $SocketName,
	                                Type	=> SOCK_STREAM,
					Timeout	=> 10 )
	    or die "Couldn't connect to $SocketName: $@\nPerhaps the services daemon isn't running?\n";
	print $socket $Command,"\n";
	my $Return = <$socket>;
	close($socket);
	if(defined($Return)) {
		chomp($Return);
	}
	return($Return);
}

# Purpose: Load the data
# Usage: LoadData();
sub LoadData {
	unless(-e "$DataDir/users.conf") {
		die("$DataDir/users.conf does not exist\n");
	}
	%Users = do("$DataDir/users.conf");
	return(1);
}

# Purpose: Write the data
# Usage: WriteData();
sub WriteData {
	my $WriteTo;
	open($WriteTo, ">", "$DataDir/users.conf") or do {
		print "WARNING: Unable to write data to $DataDir/users.conf!\n";
		return(undef);
	};
	print $WriteTo "# Day Planner services user configuration file\n";
	$Data::Dumper::Purity = 1;
	$Data::Dumper::Sortkeys = 1;
	$Data::Dumper::Indent = 1;
	print $WriteTo Data::Dumper->Dump([\%Users], ["*Users"]);
	close($WriteTo);
	DaemonReloadUsers();
}

# Purpose: Tell the daemon to reload its user list
# Usage: DaemonReloadUsers();
sub DaemonReloadUsers {
	print "Telling the daemon to reload the data...";
	my $Reply = SendDaemonCommand("RELOAD_USERLIST");
	if($Reply eq "DONE") {
		print "done\n";
	} else {
		if($Reply eq "REFUSED") {
			print "failed. Permission denied\n";
		} else {
			print "failed, replied $Reply\n";
		}
	}
}

# Purpose: Display the uptime of the daemon
# Usage: DaemonUptime();
sub DaemonUptime {
	my $Reply = SendDaemonCommand("UPTIME");
	if ( defined($_[0]) and $_[0] eq "SILENT" ) {
		print "Daemon uptime: $Reply\n" if not $Reply eq "REFUSED";
	} else {
		if($Reply eq "REFUSED") {
			print "Permission denied.\n";
		} else {
			print "Uptime: $Reply\n";
		}
		WaitContinue();
	}
}

# Purpose: Display the version of the daemon
# Usage: DaemonVersion();
sub DaemonVersion {
	my $Reply = SendDaemonCommand("VERSION");
	if ( defined($_[0]) and $_[0] eq "SILENT" ) {
		print "Daemon version: $Reply\n" if not $Reply eq "REFUSED";
	} else {
		if($Reply eq "REFUSED") {
			print "Permission denied.\n";
		} else {
			print "Version: $Reply\n";
		}
		WaitContinue();
	}
}

# Purpose: Print prompt, get input and validate the input
# Usage: my $Input = GetInput("PROMPT", "VALID_INPUT");
# 	VALID_INPUT can be [NUMERIC] for nunmeric, a list of characters (not seperated)
# 	or simply "" for "anything as long as it's not empty"
sub GetInput ($$) {
	my ($Message, $Commands) = @_;
	while (1) {
		print "$Message";
		my $Input = <STDIN>;
		chomp($Input);
		if(length($Input) and $Input =~ /\S/) {
			if(length($Commands)) {
				if ($Commands eq '[NUMERIC]') {
					if ($Input =~ /^\d+$/) {
						return($Input);
					} else {
						print "Kun tall er tillatt\n";
					}
				} else {
					foreach(split(//, $Commands)) {
						if($Input =~ /^$_$/i) {
							return($Input);
						}
					}
					print "Invalid response\n";
				}
			} else {
				return($Input);
			}
		}
	}
}

# Purpose: Get a password
# Usage: GetPassword();
sub GetPassword {
	print "Password: ";
	ReadMode(2);
	my $key = <STDIN>;
	ReadMode(0);
	print "\n";
	chomp($key);
	return($key);
}

# Purpose: Let the user talk directly to the daemon
# Usage: DirectDaemonInput();
sub DirectDaemonInput {
	# Print initial warning and welcomming message
	print "WARNING: Use with care, you have RAW access to the daemon and I\n will NOT stop you from destroying data!\n\n";
	print "Type !QUIT to quit\n";
	
	# Create our Term::ReadLine object
	my $term = Term::ReadLine->new('Day Planner services daemon');
	# Get the attribs and set up autocompleteion
#	my $attribs = $term->Attribs;
#	$attribs->{completion_entry_function} = $attribs->{list_completion_function};
#	$attribs->{completion_word} = [qw(HI PING SHUTDOWN RELOAD_DATA BYE VERSION GET_PATH NOTIFICATION GET VERIFY CLEAN DEBUG DUMP_VARIOUS DUMP_CLIENTLIST DUMP_SLEEPTIME ENABLE_DEBUGLOG KICK RECALCULATE DUMP_HASHES DUMP_MAINHASH DUMP_CONFIG !QUIT !HELP !RESTART_DAEMON)];
	
	# Eternal loop getting and parsing user input
	while (1) {
		# Get the input
		my $COMMAND = $term->readline('Command: ');
		if($COMMAND =~ /^!QUIT/) {
			return(1);
		} else {
			print SendDaemonCommand($COMMAND);
			print "\n";
		}
	}
}

# Purpose: Add a user
# Usage: AddUser();
sub AddUser {
	ClearScreen();
	print "Adding a user\n\n";
	my $Username = GetInput("Username: ", "");
	while(defined($Users{$Username})) {
		print " That user already exists\n";
		$Username = GetInput("Username: ", "");
	}
	my $Password = GetInput("Password: ", "");
	my $Encrypted = GetInput("Should the users data be treated as encrypted? [YN] ", "yn");
	my $GenHTML = 0;
	unless($Encrypted =~ /y/i) {
		$GenHTML = GetInput("Does the user want HTML generated? [YN] ", "yn");
	} else {
		print "Warning: encryption is NOT implemented\n";
	}
	print "\n";
	my $Language = GetInput("Language: ", "");
	my $Level = SetUserLevel();
	$| = 1;
	print "Adding...";
	$Users{$Username}{password} = $Password;
	$Users{$Username}{level} = $Level;
	$Users{$Username}{settings}{Encrypted} = $Encrypted =~ /y/i ? 1 : 0;
	$Users{$Username}{settings}{GenHTML} = $GenHTML =~ /y/ ? 1 : 0;
	$Users{$Username}{settings}{language} = $Language;
	unless (-d "$DataDir/users/$Username/") {
		mkpath("$DataDir/users/$Username/") or warn("FAILED to mkpath($DataDir/users/$Username/): $!\n");
	}
	print "done\n";
	WriteData();
	WaitContinue();
}

# Purpose: Display formatted user level information
# Usage: UserLevelInfo(LEVEL, STATE, INFORMATION);
sub UserLevelInfo {
	printf "%-2s %-15s %s\n", $_[0], $_[1], $_[2];

}

# Purpose: Set the user level of a user
# Usage: $Level = SetUserLevel();
sub SetUserLevel {
	print "User levels:\n";
	UserLevelInfo(0, "EXPIRED", "Account expired - no access");
	UserLevelInfo(1, "EXPIRED", "Account expired - read only access");
	UserLevelInfo(2, "ACTIVE", "Account active - read/write access");
	UserLevelInfo(3, "ACTIVE", "Account active - read/write access");
	UserLevelInfo(4, "ADMIN", "Account is an admin - read/write access plus admin commands");
	my $Level = GetInput("User level: [01234] ", "01234");
	return($Level);
}

# Purpose: Get a valid user name present in the DB
# Usage: $Name = GetValidUsername();
sub GetValidUsername {
	while(1) {
		my $Username = GetInput("Username: ", "");
		if(defined($Users{$Username})) {
			return($Username);
		}
		print "No user with that username exists\n";
	}
}

# Purpose: Get information about a user
# Usage: GetUserInfo();
sub GetUserInfo {
	ClearScreen();
	print "Which user do you want to view information about?\n";
	my $User = GetValidUsername();
	$Data::Dumper::Purity = 1;
	$Data::Dumper::Sortkeys = 1;
	$Data::Dumper::Indent = 1;
	my $Hashref = $Users{$User}{settings};
	print Data::Dumper->Dump([$Hashref], ["*current settings"]);
	WaitContinue();
	return(1);
}

# Purpose: Change settings for a user
# Usage: ChangeUserSettings();
sub ChangeUserSettings {
	ClearScreen();
	print "Which user do you want to change settings for?\n";
	my $User = GetValidUsername();
	$Data::Dumper::Purity = 1;
	$Data::Dumper::Sortkeys = 1;
	$Data::Dumper::Indent = 1;
	my $Hashref = $Users{$User}{settings};
	print Data::Dumper->Dump([$Hashref], ["*current settings"]);
	while(1) {
		my $ChangeSetting = GetInput("Which setting do you want to set? ", "");
		if(defined($Users{$User}{settings}{$ChangeSetting})) {
				print "Current value: $ChangeSetting=$Users{$User}{settings}{$ChangeSetting}\n";
			} else {
				print "Current value: $ChangeSetting=NOT_SET\n";
			}
		my $ChangeTo = GetInput("What do you want to change it to? ", "");
		print "Will set the following setting:\n$ChangeSetting=$ChangeTo\n";
		my $OK = GetInput("OK? ", "YN");
		if($OK =~ /y/i) {
			$Users{$User}{settings}{$ChangeSetting} = $ChangeTo;
		} else {
			print "Change cancelled\n";
		}
		WriteData();
		WaitContinue();
		return(1);
	}
}

# Purpose: Change the level of a user
# Usage: ChangeUserLevel();
sub ChangeUserLevel {
	ClearScreen();
	my $User = GetValidUsername();
	my $Level = SetUserLevel();
	$Users{$User}{level} = $Level;
	print "User level of $User set to $Level\n";
	WriteData();
	WaitContinue();
}

# Purpose: Delete a user
# Usage: DeleteUser();
sub DeleteUser {
	ClearScreen();
	print "Which user do you want to delete?\n";
	my $User = GetValidUsername();
	delete($Users{$User});
	print "User deleted. The data directory for this user is still left intact!\n";
	WriteData();
	WaitContinue();
}

# Purpose: Print nicely formatted user list info
# Usage: PrintUserList(USERNAME, LEVEL, ACCESS);
sub PrintUserList {
	printf "%-20s %-20s %s\n", $_[0], $_[1], $_[2];
}

# Purpose: Wait until the user presses enter
# Usage: WaitContinue();
sub WaitContinue {
	$| = 1;
	print "Press enter to continue";
	<STDIN>;
}

# Purpose: Regenerate the data MD5 for the specified user
# Usage: RegenerateDataMD5For(USER);
sub RegenerateDataMD5For {
	my $User = shift;
	if(not (-e "$DataDir/users/$User/dataconfig") or not(-e "$DataDir/users/$User/calendardata")) {
		print "The user \"$User\" does not have the needed files present\n";
		return(0);
	}
	print "Regenerating...";
	my %DataHash;
	LoadConfigFile("$DataDir/users/$User/dataconfig", \%DataHash);
	print ".";
	open(my $UserData, "<", "$DataDir/users/$User/calendardata");
	my $ContainedData = <$UserData>;
	print ".";
	$DataHash{LastMD5} = md5_base64($ContainedData);
	close($UserData);
	print ".";
	WriteConfigFile("$DataDir/users/$User/dataconfig", \%DataHash, { HEADER => "Written by DPSAdmin"});
	print "done ($DataHash{LastMD5})\n";
}

# Purpose: Regenerate the data MD5 for all users
# Usage: RegenerateAllUserMD5();
sub RegenerateAllUserMD5 {
	ClearScreen();
	print "Regenerating MD5 sums for all user data:\n";
	foreach my $UserN (sort(keys(%Users))) {
		print " $UserN: ";
		RegenerateDataMD5For($UserN);
	}
	WaitContinue();
}

# Purpose: Prompt to regenerate the data MD5 for a user
# Usage: RegenerateUserMD5();
sub RegenerateUserMD5 {
	ClearScreen();
	print "Which user do you wish to regenerate the MD5 sum for?\n";
	my $User = GetValidUsername();
	RegenerateDataMD5For($User);
	WaitContinue();
}

# Purpose: Hand-edit the user configuration
# Usage: EditUserConfig();
sub EditUserConfig {
	ClearScreen();
	print "Which user do you wish to hand-edit the data for?\n";
	my $UserName = GetValidUsername();

	if(not -e "$DataDir/users/$UserName/dataconfig") {
		print "This user doesn't have any configuration file\n";
		print "Unable to edit\n";
		WaitContinue();
		return(1);
	}

	my %CurrUserData;
	LoadConfigFile("$DataDir/users/$UserName/dataconfig", \%CurrUserData);
	
	$Data::Dumper::Purity = 1;
	$Data::Dumper::Sortkeys = 1;
	$Data::Dumper::Indent = 1;
	print Data::Dumper->Dump([\%CurrUserData], ["*current settings"]);
	while(1) {
		my $ChangeSetting = GetInput("Which setting do you want to set? ", "");
		if(defined($CurrUserData{$ChangeSetting})) {
				print "Current value: $ChangeSetting=$CurrUserData{$ChangeSetting}\n";
			} else {
				print "Current value: $ChangeSetting=NOT_SET\n";
			}
		my $ChangeTo = GetInput("What do you want to change it to? ", "");
		print "Will set the following setting:\n$ChangeSetting=$ChangeTo\n";
		my $OK = GetInput("OK? ", "YN");
		if($OK =~ /y/i) {
			$CurrUserData{$ChangeSetting} = $ChangeTo;
		} else {
			print "Change cancelled\n";
		}
		WriteConfigFile("$DataDir/users/$UserName/dataconfig", \%CurrUserData, { HEADER => "Written by DPSAdmin"});
		WaitContinue();
		return(1);
	}

}

# Purpose: Print the user list
# Usage: UserList();
sub UserList {
	ClearScreen();
	PrintUserList("Username:", "Level:", "Access:");
	foreach my $User (sort(keys(%Users))) {
		my $Level = $Users{$User}{level};
		my $LevelInfo;
		my $Access;
		if($Level == 0) {
			$LevelInfo = "$Level (EXPIRED)";
			$Access = "none";
		} elsif($Level == 1) {
			$LevelInfo = "$Level (EXPIRED)";
			$Access = "ro";
		} elsif($Level == 2 or $Level == 3) {
			$LevelInfo = "$Level (ACTIVE)";
			$Access = "rw";
		} elsif($Level == 4) {
			$LevelInfo = "$Level (ADMIN)";
			$Access = "rw/admin";
		} else {
			$LevelInfo = "$Level (UNKNOWN)";
			$Access = "UNKNOWN";
		}
		PrintUserList($User, $LevelInfo, $Access);
	}
	print "\n";
	WaitContinue();
}

# Purpose: Display the expert menu
# Usage: ExpertMenu();
sub ExpertMenu {
	while(1) {
		ClearScreen();
		print "DPS Admin - Expert menu\n\n";
		print "Warning: These options can do actual damage to the data used by the DPS server!\n\n";
		print "Menu:\n";
		print "U - Regenerate data MD5 for a user\n";
		print "\tThis is useful in the case of data corruption where you wish to simply\n";
		print "\tre-enable the account without restoring backups\n";
		print "R - Regenerate data MD5 for all users\n";
		print "\tUseful for data corruption for multiple users\n";
		print "E - Edit the data config for a user\n";
		print "C - Talk directly to the daemon\n";
		print "M - Return to the main menu\n";
		my $Input = GetInput("Selection: ", "UREMC");
		if($Input =~ /U/i) {
			RegenerateUserMD5();
		} elsif($Input =~ /e/i) {
			EditUserConfig();
		} elsif($Input =~ /r/i) {
			RegenerateAllUserMD5();
		} elsif($Input =~ /c/i) {
			DirectDaemonInput();
		} else {
			return(1);
		}
	}
}

# Purpose: Display the main menu. Also takes care of calling LoadData(); and WriteData();
# Usage: MainMenu();
sub MainMenu {
	LoadData();
	while(1) {
		ClearScreen();
		print "Welcome to the Day Planner services administration console\n";
		DaemonUptime("SILENT");
		DaemonVersion("SILENT");
		print "\n";
		print "Menu:\n";
		print "A - Add a new user\nD - Delete a user\n";
		print "E - Edit a user\n";
		print "C - Change the level of a user\n";
		print "V - View the user list\n";
		print "I - View information about a user\n";
		print "R - Tell the Day Planner services daemon to reload the userlist\n";
		print "U - Display the daemon uptime\n";
		print "X - View the expert menu\n";
		print "Q - Quit\n";
		my $Input = GetInput("Selection: ", "ADECVIQRUX");
		if($Input =~ /q/i) {
			exit(0);
		} elsif ($Input =~ /a/i) {
			AddUser();
		} elsif ($Input =~ /d/i) {
			DeleteUser();
		} elsif ($Input =~ /e/i) {
			ChangeUserSettings();
		} elsif ($Input =~ /c/i) {
			ChangeUserLevel();
		} elsif ($Input =~ /v/i) {
			UserList();
		} elsif ($Input =~ /i/i) {
			GetUserInfo();
		} elsif ($Input =~ /r/i) {
			DaemonReloadUsers();
			WaitContinue();
		} elsif ($Input =~ /x/i) {
			ExpertMenu();
		} elsif ($Input =~ /u/i) {
			DaemonUptime();
		}
	}
}

MainMenu();
