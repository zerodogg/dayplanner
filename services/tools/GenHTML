#!/usr/bin/perl
# GenHTML
# Copyright (C) Eskild Hustvedt 2006
# $Id$
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

$0 = "GenHTML";

use strict;
use warnings;
use Getopt::Long;
use Cwd qw/realpath/;
use Digest::MD5 qw/md5_base64/;
use MIME::Base64;

my $PID = fork;
exit if $PID;
die "Unable to fork: $!\n" unless defined($PID);
my $Logfile = "/dev/null";	# We don't need to log anything at this point
open(STDIN, "<", "/dev/null") or warn("Couldn't reopen STDIN to /dev/null: $!");
open(STDOUT, ">>", $Logfile) or warn("Couldn't reopen STDOUT to $Logfile: $!");
open(STDERR, ">>", $Logfile) or warn("Couldn't reopen STDERR to $Logfile: $!");

# Purpose: Perform simple locking
# Usage: LockFile(PATH);
# 	NOTICE: This function is not safe from race conditions but
# 	provides minor security.
sub LockFile {
	my $Lockfile = shift;
	my $Iter;
	while(-e $Lockfile) {
		open(my $RLF, "<", $Lockfile);
		my $LFC = <$RLF>;
		close($RLF);
		if(-e "/proc/$LFC") {
			sleep(1);
			$Iter++;
			if($Iter == 20) {
				unlink($Lockfile);
				last;
			}
		} else {
			unlink($Lockfile);
			last;
		}
	}
	open(my $LF, ">", $Lockfile);
	print $LF "$$";
	close($LF);
	open(my $RLF, "<", $Lockfile);
	my $LFC = <$RLF>;
	if(not $LFC eq "$$") {
		die("Locking failed ($LFC != $$");
	}
	return(1);	# Locked
}

# Purpose: Simple unlocking
# Usage: UnlockFile(PATH);
sub UnlockFile {
	my $Lockfile = shift;
	return(0) unless -e $Lockfile;
	open(my $RLF, "<", $Lockfile);
	my $LFC = <$RLF>;
	if(not $LFC eq $$) {
		warn("Unlocking failed: $LFC != $$\n");
		return(0);
	}
	close($RLF);
	unlink($Lockfile);
}

my $Dir;
my $User;
my $Password;
my $DPFSource;
my $Language;

my %LanguageHash = (
	nn => {
		LANGUAGE => 'nn:no@nynorsk:no_NY:no:nb',
		LC => 'nn_NO',
	},
	nb => {
		LANGUAGE => 'nb:no:nn:no:no_NO:no_NY',
		LC => 'nb_NO',
	},
	en => {
		LANGUAGE => 'en_US',
		LC => 'en_US',
	},
	cs => {
		LANGUAGE => 'cs',
		LC => 'cs',
	},
	sk => {
		LANGUAGE => 'sk',
		LC => 'sk',
	},
);

GetOptions (
	'dir=s' => \$Dir,
	'user=s' => \$User,
	'pass=s' => \$Password,
	'dpfsource=s' => \$DPFSource,
	'lang=s' => \$Language,
);
# TODO: Properly verify commandline parameters
$Language = $Language ? $Language : "en";
if(not defined($LanguageHash{$Language})) {
	$Language = 'en';
}
foreach(keys(%ENV)) {
	if(/^LC_/) {
		$ENV{$_} = $LanguageHash{$Language}{LC};
	}
	$ENV{LANGUAGE} = $LanguageHash{$Language}{LANGUAGE};
}

# TODO: mkpath
system("mkdir -p $Dir");
die("$Dir doesn't exist") unless -d $Dir;

LockFile("$Dir/.DP_GenHTML.lock");

$Dir = realpath($Dir);

# Create the htaccess file
my $HtAccess;
open($HtAccess, ">", "$Dir/.htaccess");
print $HtAccess "AuthType Basic\nAuthName 'Day planner for $User'\nAuthUserFile $Dir/.htpasswd\nRequire user $User";
close($HtAccess);
my $HtPasswd;
open($HtPasswd, ">", "$Dir/.htpasswd");
print $HtPasswd "$User:" . crypt($Password,"123");	# TODO: Proper salt
close($HtPasswd);

# Create the temp dir
system("mkdir -p $Dir/.tmp/");		# TODO: Don't use mkdir

# Create the DPF
my $CALENDAR_SRCFILE;
open($CALENDAR_SRCFILE, "<", $DPFSource);
my $ICS_Content = <$CALENDAR_SRCFILE>;	# Slurp
close($CALENDAR_SRCFILE);
my $ICS_Target;
open($ICS_Target, ">", "$Dir/.tmp/file.ics");
print $ICS_Target decode_base64($ICS_Content);
close($ICS_Target);

# Run day planner to generate the html
system("dayplanner --shutdaemon --confdir '$Dir/.tmp/' --importical $Dir/.tmp/file.ics");
system("rm -f $Dir/*.html");
open(my $TempHtml, ">", "$Dir/index.html");
print $TempHtml "HTML is currently being generated...";
close($TempHtml);
system("dayplanner --shutdaemon --confdir '$Dir/.tmp/' --exporthtml $Dir/");
system("rm -rf $Dir/.tmp");
UnlockFile("$Dir/.DP_GenHTML.lock");
